"""
Django settings for Facturacion_electronica project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import datetime
from datetime import timedelta
from decouple import Csv, Config,AutoConfig
from cryptography.fernet import Fernet
from dotenv import load_dotenv
import os
import io
 

#from .server import conexion_server

from django.urls import reverse_lazy
import logging

def decrypt_file(filename, key):
    encrypted_filename = f'{filename}.enc'

    # Obtén la ruta absoluta del archivo cifrado
    encrypted_filepath = os.path.join(os.path.dirname(os.path.abspath(__file__)), encrypted_filename)

    try:
        with open(encrypted_filepath, 'rb') as encrypted_file:
            encrypted_data = encrypted_file.read()

        # Cargar la clave directamente desde el archivo
        filenamek =  'key.key'
        k_filepath = os.path.join(os.path.dirname(os.path.abspath(__file__)), filenamek)
        with open(k_filepath, 'rb') as key_file:
            key = key_file.read()

        
        

        cipher = Fernet(key)

        decrypted_data = cipher.decrypt(encrypted_data)

        # No creas un nuevo archivo .env, usa la versión descifrada temporalmente
        return decrypted_data.decode('utf-8')
    except FileNotFoundError:
        print(f"Error: El archivo {encrypted_filepath} no fue encontrado.")
        return ''
    
load_dotenv()
encryption_key = os.getenv('ENCRYPTION_KEY', b'default_key_here')
if encryption_key == 'default_key_here':
    print("Warning: Using default encryption key. It's recommended to set ENCRYPTION_KEY in the environment.")
# Build paths inside the project like this: BASE_DIR / 'subdir'.
    
env_content = decrypt_file('.env', encryption_key)
env_content = env_content.replace('\r\n', '\n')

#print(env_content)
env_content_io = io.StringIO(env_content)
config = Config(env_content_io)

config_string = config.repository.getvalue()

# Divide la cadena en líneas y crea un diccionario
config_dict = dict(line.split('=') for line in config_string.splitlines() if line.strip())

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

#sql_data_conexion= conexion_server()['SQLSERVER']
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-t4)usb^29qr@x4ceyriw6=86ki2okynfqz%9si2z%&$=t653w%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['dtesvmorazan.dismo.com','192.168.1.29','138.99.3.140','dtesv.lamorazan.com']

X_FRAME_OPTIONS = 'SAMEORIGIN'
# Application definition

INSTALLED_APPS = [
   # 'jet.dashboard',
   # 'jet',    
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'dtesv',   
    'rest_framework',
    'rest_framework.authtoken',
    'django_celery_beat',
    'django_celery_results',
    
    
   
   
]
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWED_ORIGINS = [
   "https://dtesv.lamorazan.com"
]
CSRF_TRUSTED_ORIGINS = ['https://dtesv.lamorazan.com',' https://dtesvmorazan.dismo.com']
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CORS_ALLOW_CREDENTIALS = True


MIDDLEWARE = [
    # Middleware de manejo de CORS
    'corsheaders.middleware.CorsMiddleware',

    # Middleware de seguridad de Django
    'django.middleware.security.SecurityMiddleware',

    # Middleware de sesiones de Django
    'django.contrib.sessions.middleware.SessionMiddleware',

    # Middleware común de Django
    'django.middleware.common.CommonMiddleware',

    # Middleware para manejar CSRF
    'django.middleware.csrf.CsrfViewMiddleware',

    # Middleware de autenticación de Django
    'django.contrib.auth.middleware.AuthenticationMiddleware',

    # Middleware de mensajes de Django
    'django.contrib.messages.middleware.MessageMiddleware',

    # Middleware para prevenir ataques de clicjacking
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Middleware personalizado (si lo tienes)
    # 'dtesv.middleware.AutoLogoutMiddleware',
]




AUTH_PWD_MODULE="django.contrib.auth.password_validation."

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": f"{AUTH_PWD_MODULE}UserAttributeSimilarityValidator",
    },
    {
        "NAME": f"{AUTH_PWD_MODULE}MinimumLengthValidator",
    },
    {
        "NAME": f"{AUTH_PWD_MODULE}CommonPasswordValidator",
    },
    {
        "NAME": f"{AUTH_PWD_MODULE}NumericPasswordValidator",
    },
     {
        "NAME": "dtesv.validators.CustomUppercaseValidator",
        "OPTIONS": {
            "min_uppercase_chars": 1,
            "min_numeric_chars": 1,
            "min_special_chars": 1,
        },
    },
  
   
]
 
ROOT_URLCONF = 'Facturacion_electronica.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Facturacion_electronica.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
#DTesvPwDj23  old

DATABASES = {
     'default': {
        'ENGINE': 'mssql',
        'HOST': config_dict.get('DB_HOST'),
        'PORT': config_dict.get('DB_PORT'),
        'NAME': config_dict.get('DB_NAME'),
        'USER': config_dict.get('DB_USER'),
        'PASSWORD': config_dict.get('DB_PASSWORD'),
        'OPTIONS': {
            'driver': 'ODBC Driver 17 for SQL Server',
            'host_is_server': True,
            'extra_params': 'schema=mh',
        },
    },
 
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
      #  'rest_framework.authentication.TokenAuthentication',
        'dtesv.custom_auth.ExpiringTokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'user': '10/hour',  # Ejemplo: 1000 solicitudes por hora
    }
        }
TOKEN_TTL = datetime.timedelta(minutes=5)
#TOKEN_EXPIRATION = datetime.timedelta(seconds=600)
#AUTH_TOKEN_CLASSES = (
#    'rest_framework.authentication.Token',
#)
# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

AUTH_USER_MODEL = 'dtesv.user'
 
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'dtesv','static'),
]

STATIC_ROOT = '/opt/DTESV/dtesv/Facturacion_electronica/dtesv/static_root/'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

logging.basicConfig(filename='/opt/DTESV/dtesv/Facturacion_electronica/dtesv/celery.log', level=logging.ERROR)

LOGOUT_REDIRECT_URL = reverse_lazy('dtesv:login')

MEDIA_URL = '/media/'
MEDIA_ROOT  = [
    os.path.join(BASE_DIR, 'dtesv','media'),
]

def custom_upload_to(instance, filename):
    # Asegura que el nombre del archivo sea único para evitar problemas de sobreescritura
    return os.path.join('company_logos', f'{instance.id}_{filename}')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '/opt/DTESV/dtesv/Facturacion_electronica/celery.log',  # Reemplaza con la ruta completa a tu archivo de registro
            'formatter': 'custom',
        },
        
    },
    'formatters': {
        'custom': {
            'format': '{asctime} - {levelname} - {message}',  # Agrega la hora de ejecución
            'style': '{',
        },
    },
    'loggers': {
        'celery': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
#CELERY_BROKER_URL = 'redis://192.168.1.99:6379/0'
#CELERY_RESULT_BACKEND = 'redis://192.168.1.99:6379/0'
#CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
#CELERY_BEAT_SCHEDULE = {
#    'my-scheduled-task': {
#        'task': 'dtesv.tasks.send_emails_for_pending_documents',
#        'schedule': timedelta(minutes=5),  # Ejemplo: ejecutar cada 5 minutos
#    },
#}
 